// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "message.proto" (package "msg_pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message msg_pb.MetaInfo
 */
export interface MetaInfo {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 消息类型
    /**
     * @generated from protobuf field: string info = 2;
     */
    info: string; // 额外信息（可选）
}
/**
 * @generated from protobuf message msg_pb.PushMessage
 */
export interface PushMessage {
    /**
     * @generated from protobuf field: string conversation_id = 1;
     */
    conversationId: string; // 会话ID（可选）
    /**
     * @generated from protobuf field: string section_id = 2;
     */
    sectionId: string; // 部分ID（可选）
    /**
     * @generated from protobuf field: string message_id = 3;
     */
    messageId: string; // 消息ID（可选）
    /**
     * @generated from protobuf field: string local_message_id = 4;
     */
    localMessageId: string; // 本地消息ID（可选）
    /**
     * @generated from protobuf field: int32 index = 5;
     */
    index: number; // 索引（可选）
    /**
     * @generated from protobuf field: string sec_sender = 6;
     */
    secSender: string; // 第二发送者（可选）
    /**
     * @generated from protobuf field: string reply_id = 7;
     */
    replyId: string; // 回复ID（可选）
    /**
     * @generated from protobuf field: int32 status = 8;
     */
    status: number; // 状态（可选）
    /**
     * @generated from protobuf field: int32 create_time = 9;
     */
    createTime: number; // 创建时间（可选）
    /**
     * @generated from protobuf field: int32 message_type = 10;
     */
    messageType: number; // 消息类型（可选）
    /**
     * @generated from protobuf field: int32 content_type = 11;
     */
    contentType: number; // 内容类型（可选）
    /**
     * @generated from protobuf field: string content = 12;
     */
    content: string; // 内容（可选）
    /**
     * @generated from protobuf field: string tts_content = 13;
     */
    ttsContent: string; // TTS内容（可选）
    /**
     * @generated from protobuf field: map<string, string> ext = 14;
     */
    ext: {
        [key: string]: string;
    }; // 扩展信息（可选）
    /**
     * @generated from protobuf field: int32 next_connection_type = 15;
     */
    nextConnectionType: number; // 下一个连接类型（可选）
    /**
     * @generated from protobuf field: int32 chunk_seq = 16;
     */
    chunkSeq: number; // 分块序列（可选）
    /**
     * @generated from protobuf field: bool is_delta = 17;
     */
    isDelta: boolean; // 是否为增量（可选）
    /**
     * @generated from protobuf field: repeated msg_pb.MetaInfo meta_infos = 18;
     */
    metaInfos: MetaInfo[]; // 元信息列表
    /**
     * @generated from protobuf field: string local_conversation_id = 19;
     */
    localConversationId: string; // 本地会话ID（可选）
    /**
     * @generated from protobuf field: string bot_id = 20;
     */
    botId: string; // 机器人ID（可选）
    /**
     * @generated from protobuf field: map<string, string> applet_payload = 21;
     */
    appletPayload: {
        [key: string]: string;
    }; // 小程序有效载荷（可选）
    /**
     * @generated from protobuf field: int32 model_type = 22;
     */
    modelType: number; // 模型类型（可选）
    /**
     * @generated from protobuf field: int32 update_time = 23;
     */
    updateTime: number; // 更新时间（可选）
    /**
     * @generated from protobuf field: int32 thread_id = 24;
     */
    threadId: number; // 线程ID（可选）
}
/**
 * @generated from protobuf message msg_pb.PushCmd
 */
export interface PushCmd {
    /**
     * @generated from protobuf field: int32 cmd_type = 1;
     */
    cmdType: number; // 命令类型（可选）
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number; // 索引（可选）
    /**
     * @generated from protobuf field: string conversation_id = 3;
     */
    conversationId: string; // 会话ID（可选）
    /**
     * @generated from protobuf field: string message_id = 4;
     */
    messageId: string; // 消息ID（可选）
    /**
     * @generated from protobuf field: map<string, string> ext = 5;
     */
    ext: {
        [key: string]: string;
    }; // 扩展信息（可选）
    /**
     * @generated from protobuf field: int32 up_cmd_type = 6;
     */
    upCmdType: number; // 上级命令类型（可选）
    /**
     * @generated from protobuf field: string local_message_id = 7;
     */
    localMessageId: string; // 本地消息ID（可选）
}
/**
 * @generated from protobuf message msg_pb.GeoInfo
 */
export interface GeoInfo {
    /**
     * @generated from protobuf field: string longitude = 1;
     */
    longitude: string; // 经度（可选）
    /**
     * @generated from protobuf field: string latitude = 2;
     */
    latitude: string; // 纬度（可选）
    /**
     * @generated from protobuf field: string country_name = 3;
     */
    countryName: string; // 国家名称（可选）
    /**
     * @generated from protobuf field: string province_name = 4;
     */
    provinceName: string; // 省份名称（可选）
    /**
     * @generated from protobuf field: string city_name = 5;
     */
    cityName: string; // 城市名称（可选）
    /**
     * @generated from protobuf field: string district_name = 6;
     */
    districtName: string; // 区域名称（可选）
    /**
     * @generated from protobuf field: string town_name = 7;
     */
    townName: string; // 镇名称（可选）
    /**
     * @generated from protobuf field: string country_code = 8;
     */
    countryCode: string; // 国家代码（可选）
}
/**
 * @generated from protobuf message msg_pb.AppAction
 */
export interface AppAction {
    /**
     * @generated from protobuf field: int64 message_id = 1;
     */
    messageId: bigint; // 消息 ID（可选）
    /**
     * @generated from protobuf field: string local_message_id = 2;
     */
    localMessageId: string; // 本地消息 ID（可选）
    /**
     * @generated from protobuf field: int64 reply_id = 3;
     */
    replyId: bigint; // 回复 ID（可选）
    /**
     * @generated from protobuf field: int64 question_id = 4;
     */
    questionId: bigint; // 问题 ID（可选）
    /**
     * @generated from protobuf field: int64 create_time = 5;
     */
    createTime: bigint; // 创建时间（可选）
    /**
     * @generated from protobuf field: string content = 6;
     */
    content: string; // 内容（可选）
    /**
     * @generated from protobuf field: map<string, string> ext = 7;
     */
    ext: {
        [key: string]: string;
    }; // 扩展信息（可选）
    /**
     * @generated from protobuf field: int32 message_type = 8;
     */
    messageType: number; // 消息类型（可选）
}
/**
 * @generated from protobuf message msg_pb.PushEvent
 */
export interface PushEvent {
    /**
     * @generated from protobuf field: msg_pb.PushEvent.EventType event_type = 1;
     */
    eventType: PushEvent_EventType; // 事件类型
    /**
     * @generated from protobuf field: msg_pb.PushMessage message = 2;
     */
    message?: PushMessage; // 消息（可选）
    /**
     * @generated from protobuf field: msg_pb.PushCmd cmd = 3;
     */
    cmd?: PushCmd; // 命令（可选）
    /**
     * @generated from protobuf field: msg_pb.GeoInfo geo = 4;
     */
    geo?: GeoInfo; // 地理信息（可选）
    /**
     * @generated from protobuf field: msg_pb.AppAction app_action = 5;
     */
    appAction?: AppAction; // 应用行为（可选）
    /**
     * @generated from protobuf field: int32 version = 6;
     */
    version: number; // 版本（可选）
    /**
     * @generated from protobuf field: repeated msg_pb.PushMessage message_list = 7;
     */
    messageList: PushMessage[]; // 消息列表
}
/**
 * @generated from protobuf enum msg_pb.PushEvent.EventType
 */
export enum PushEvent_EventType {
    /**
     * @generated from protobuf enum value: UNKNOW = 0;
     */
    UNKNOW = 0,
    /**
     * @generated from protobuf enum value: AppAction = 3;
     */
    AppAction = 3,
    /**
     * @generated from protobuf enum value: PushCmd = 2;
     */
    PushCmd = 2,
    /**
     * @generated from protobuf enum value: PushMessage = 1;
     */
    PushMessage = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class MetaInfo$Type extends MessageType<MetaInfo> {
    constructor() {
        super("msg_pb.MetaInfo", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MetaInfo>): MetaInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.info = "";
        if (value !== undefined)
            reflectionMergePartial<MetaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetaInfo): MetaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string info */ 2:
                    message.info = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string info = 2; */
        if (message.info !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.info);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.MetaInfo
 */
export const MetaInfo = new MetaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushMessage$Type extends MessageType<PushMessage> {
    constructor() {
        super("msg_pb.PushMessage", [
            { no: 1, name: "conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "local_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "sec_sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reply_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "create_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "content_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "tts_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "ext", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 15, name: "next_connection_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "chunk_seq", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "is_delta", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "meta_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetaInfo },
            { no: 19, name: "local_conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "applet_payload", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 22, name: "model_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "update_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "thread_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PushMessage>): PushMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.conversationId = "";
        message.sectionId = "";
        message.messageId = "";
        message.localMessageId = "";
        message.index = 0;
        message.secSender = "";
        message.replyId = "";
        message.status = 0;
        message.createTime = 0;
        message.messageType = 0;
        message.contentType = 0;
        message.content = "";
        message.ttsContent = "";
        message.ext = {};
        message.nextConnectionType = 0;
        message.chunkSeq = 0;
        message.isDelta = false;
        message.metaInfos = [];
        message.localConversationId = "";
        message.botId = "";
        message.appletPayload = {};
        message.modelType = 0;
        message.updateTime = 0;
        message.threadId = 0;
        if (value !== undefined)
            reflectionMergePartial<PushMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushMessage): PushMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string conversation_id */ 1:
                    message.conversationId = reader.string();
                    break;
                case /* string section_id */ 2:
                    message.sectionId = reader.string();
                    break;
                case /* string message_id */ 3:
                    message.messageId = reader.string();
                    break;
                case /* string local_message_id */ 4:
                    message.localMessageId = reader.string();
                    break;
                case /* int32 index */ 5:
                    message.index = reader.int32();
                    break;
                case /* string sec_sender */ 6:
                    message.secSender = reader.string();
                    break;
                case /* string reply_id */ 7:
                    message.replyId = reader.string();
                    break;
                case /* int32 status */ 8:
                    message.status = reader.int32();
                    break;
                case /* int32 create_time */ 9:
                    message.createTime = reader.int32();
                    break;
                case /* int32 message_type */ 10:
                    message.messageType = reader.int32();
                    break;
                case /* int32 content_type */ 11:
                    message.contentType = reader.int32();
                    break;
                case /* string content */ 12:
                    message.content = reader.string();
                    break;
                case /* string tts_content */ 13:
                    message.ttsContent = reader.string();
                    break;
                case /* map<string, string> ext */ 14:
                    this.binaryReadMap14(message.ext, reader, options);
                    break;
                case /* int32 next_connection_type */ 15:
                    message.nextConnectionType = reader.int32();
                    break;
                case /* int32 chunk_seq */ 16:
                    message.chunkSeq = reader.int32();
                    break;
                case /* bool is_delta */ 17:
                    message.isDelta = reader.bool();
                    break;
                case /* repeated msg_pb.MetaInfo meta_infos */ 18:
                    message.metaInfos.push(MetaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string local_conversation_id */ 19:
                    message.localConversationId = reader.string();
                    break;
                case /* string bot_id */ 20:
                    message.botId = reader.string();
                    break;
                case /* map<string, string> applet_payload */ 21:
                    this.binaryReadMap21(message.appletPayload, reader, options);
                    break;
                case /* int32 model_type */ 22:
                    message.modelType = reader.int32();
                    break;
                case /* int32 update_time */ 23:
                    message.updateTime = reader.int32();
                    break;
                case /* int32 thread_id */ 24:
                    message.threadId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: PushMessage["ext"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PushMessage["ext"] | undefined, val: PushMessage["ext"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field msg_pb.PushMessage.ext");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap21(map: PushMessage["appletPayload"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PushMessage["appletPayload"] | undefined, val: PushMessage["appletPayload"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field msg_pb.PushMessage.applet_payload");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PushMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string conversation_id = 1; */
        if (message.conversationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.conversationId);
        /* string section_id = 2; */
        if (message.sectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sectionId);
        /* string message_id = 3; */
        if (message.messageId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageId);
        /* string local_message_id = 4; */
        if (message.localMessageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.localMessageId);
        /* int32 index = 5; */
        if (message.index !== 0)
            writer.tag(5, WireType.Varint).int32(message.index);
        /* string sec_sender = 6; */
        if (message.secSender !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.secSender);
        /* string reply_id = 7; */
        if (message.replyId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.replyId);
        /* int32 status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* int32 create_time = 9; */
        if (message.createTime !== 0)
            writer.tag(9, WireType.Varint).int32(message.createTime);
        /* int32 message_type = 10; */
        if (message.messageType !== 0)
            writer.tag(10, WireType.Varint).int32(message.messageType);
        /* int32 content_type = 11; */
        if (message.contentType !== 0)
            writer.tag(11, WireType.Varint).int32(message.contentType);
        /* string content = 12; */
        if (message.content !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.content);
        /* string tts_content = 13; */
        if (message.ttsContent !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.ttsContent);
        /* map<string, string> ext = 14; */
        for (let k of globalThis.Object.keys(message.ext))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.ext[k]).join();
        /* int32 next_connection_type = 15; */
        if (message.nextConnectionType !== 0)
            writer.tag(15, WireType.Varint).int32(message.nextConnectionType);
        /* int32 chunk_seq = 16; */
        if (message.chunkSeq !== 0)
            writer.tag(16, WireType.Varint).int32(message.chunkSeq);
        /* bool is_delta = 17; */
        if (message.isDelta !== false)
            writer.tag(17, WireType.Varint).bool(message.isDelta);
        /* repeated msg_pb.MetaInfo meta_infos = 18; */
        for (let i = 0; i < message.metaInfos.length; i++)
            MetaInfo.internalBinaryWrite(message.metaInfos[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* string local_conversation_id = 19; */
        if (message.localConversationId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.localConversationId);
        /* string bot_id = 20; */
        if (message.botId !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.botId);
        /* map<string, string> applet_payload = 21; */
        for (let k of globalThis.Object.keys(message.appletPayload))
            writer.tag(21, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.appletPayload[k]).join();
        /* int32 model_type = 22; */
        if (message.modelType !== 0)
            writer.tag(22, WireType.Varint).int32(message.modelType);
        /* int32 update_time = 23; */
        if (message.updateTime !== 0)
            writer.tag(23, WireType.Varint).int32(message.updateTime);
        /* int32 thread_id = 24; */
        if (message.threadId !== 0)
            writer.tag(24, WireType.Varint).int32(message.threadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.PushMessage
 */
export const PushMessage = new PushMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushCmd$Type extends MessageType<PushCmd> {
    constructor() {
        super("msg_pb.PushCmd", [
            { no: 1, name: "cmd_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ext", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 6, name: "up_cmd_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "local_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushCmd>): PushCmd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cmdType = 0;
        message.index = 0;
        message.conversationId = "";
        message.messageId = "";
        message.ext = {};
        message.upCmdType = 0;
        message.localMessageId = "";
        if (value !== undefined)
            reflectionMergePartial<PushCmd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushCmd): PushCmd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 cmd_type */ 1:
                    message.cmdType = reader.int32();
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                case /* string conversation_id */ 3:
                    message.conversationId = reader.string();
                    break;
                case /* string message_id */ 4:
                    message.messageId = reader.string();
                    break;
                case /* map<string, string> ext */ 5:
                    this.binaryReadMap5(message.ext, reader, options);
                    break;
                case /* int32 up_cmd_type */ 6:
                    message.upCmdType = reader.int32();
                    break;
                case /* string local_message_id */ 7:
                    message.localMessageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: PushCmd["ext"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PushCmd["ext"] | undefined, val: PushCmd["ext"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field msg_pb.PushCmd.ext");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PushCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 cmd_type = 1; */
        if (message.cmdType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cmdType);
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        /* string conversation_id = 3; */
        if (message.conversationId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.conversationId);
        /* string message_id = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* map<string, string> ext = 5; */
        for (let k of globalThis.Object.keys(message.ext))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.ext[k]).join();
        /* int32 up_cmd_type = 6; */
        if (message.upCmdType !== 0)
            writer.tag(6, WireType.Varint).int32(message.upCmdType);
        /* string local_message_id = 7; */
        if (message.localMessageId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.localMessageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.PushCmd
 */
export const PushCmd = new PushCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoInfo$Type extends MessageType<GeoInfo> {
    constructor() {
        super("msg_pb.GeoInfo", [
            { no: 1, name: "longitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "province_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "city_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "district_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "town_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeoInfo>): GeoInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.longitude = "";
        message.latitude = "";
        message.countryName = "";
        message.provinceName = "";
        message.cityName = "";
        message.districtName = "";
        message.townName = "";
        message.countryCode = "";
        if (value !== undefined)
            reflectionMergePartial<GeoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeoInfo): GeoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string longitude */ 1:
                    message.longitude = reader.string();
                    break;
                case /* string latitude */ 2:
                    message.latitude = reader.string();
                    break;
                case /* string country_name */ 3:
                    message.countryName = reader.string();
                    break;
                case /* string province_name */ 4:
                    message.provinceName = reader.string();
                    break;
                case /* string city_name */ 5:
                    message.cityName = reader.string();
                    break;
                case /* string district_name */ 6:
                    message.districtName = reader.string();
                    break;
                case /* string town_name */ 7:
                    message.townName = reader.string();
                    break;
                case /* string country_code */ 8:
                    message.countryCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string longitude = 1; */
        if (message.longitude !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.longitude);
        /* string latitude = 2; */
        if (message.latitude !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.latitude);
        /* string country_name = 3; */
        if (message.countryName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.countryName);
        /* string province_name = 4; */
        if (message.provinceName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.provinceName);
        /* string city_name = 5; */
        if (message.cityName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cityName);
        /* string district_name = 6; */
        if (message.districtName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.districtName);
        /* string town_name = 7; */
        if (message.townName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.townName);
        /* string country_code = 8; */
        if (message.countryCode !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.countryCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.GeoInfo
 */
export const GeoInfo = new GeoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppAction$Type extends MessageType<AppAction> {
    constructor() {
        super("msg_pb.AppAction", [
            { no: 1, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "local_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reply_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "question_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "create_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ext", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 8, name: "message_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AppAction>): AppAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0n;
        message.localMessageId = "";
        message.replyId = 0n;
        message.questionId = 0n;
        message.createTime = 0n;
        message.content = "";
        message.ext = {};
        message.messageType = 0;
        if (value !== undefined)
            reflectionMergePartial<AppAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppAction): AppAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 message_id */ 1:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* string local_message_id */ 2:
                    message.localMessageId = reader.string();
                    break;
                case /* int64 reply_id */ 3:
                    message.replyId = reader.int64().toBigInt();
                    break;
                case /* int64 question_id */ 4:
                    message.questionId = reader.int64().toBigInt();
                    break;
                case /* int64 create_time */ 5:
                    message.createTime = reader.int64().toBigInt();
                    break;
                case /* string content */ 6:
                    message.content = reader.string();
                    break;
                case /* map<string, string> ext */ 7:
                    this.binaryReadMap7(message.ext, reader, options);
                    break;
                case /* int32 message_type */ 8:
                    message.messageType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: AppAction["ext"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AppAction["ext"] | undefined, val: AppAction["ext"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field msg_pb.AppAction.ext");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AppAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 message_id = 1; */
        if (message.messageId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.messageId);
        /* string local_message_id = 2; */
        if (message.localMessageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.localMessageId);
        /* int64 reply_id = 3; */
        if (message.replyId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.replyId);
        /* int64 question_id = 4; */
        if (message.questionId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.questionId);
        /* int64 create_time = 5; */
        if (message.createTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.createTime);
        /* string content = 6; */
        if (message.content !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.content);
        /* map<string, string> ext = 7; */
        for (let k of globalThis.Object.keys(message.ext))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.ext[k]).join();
        /* int32 message_type = 8; */
        if (message.messageType !== 0)
            writer.tag(8, WireType.Varint).int32(message.messageType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.AppAction
 */
export const AppAction = new AppAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushEvent$Type extends MessageType<PushEvent> {
    constructor() {
        super("msg_pb.PushEvent", [
            { no: 1, name: "event_type", kind: "enum", T: () => ["msg_pb.PushEvent.EventType", PushEvent_EventType] },
            { no: 2, name: "message", kind: "message", T: () => PushMessage },
            { no: 3, name: "cmd", kind: "message", T: () => PushCmd },
            { no: 4, name: "geo", kind: "message", T: () => GeoInfo },
            { no: 5, name: "app_action", kind: "message", T: () => AppAction },
            { no: 6, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "message_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PushMessage }
        ]);
    }
    create(value?: PartialMessage<PushEvent>): PushEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.eventType = 0;
        message.version = 0;
        message.messageList = [];
        if (value !== undefined)
            reflectionMergePartial<PushEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushEvent): PushEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* msg_pb.PushEvent.EventType event_type */ 1:
                    message.eventType = reader.int32();
                    break;
                case /* msg_pb.PushMessage message */ 2:
                    message.message = PushMessage.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* msg_pb.PushCmd cmd */ 3:
                    message.cmd = PushCmd.internalBinaryRead(reader, reader.uint32(), options, message.cmd);
                    break;
                case /* msg_pb.GeoInfo geo */ 4:
                    message.geo = GeoInfo.internalBinaryRead(reader, reader.uint32(), options, message.geo);
                    break;
                case /* msg_pb.AppAction app_action */ 5:
                    message.appAction = AppAction.internalBinaryRead(reader, reader.uint32(), options, message.appAction);
                    break;
                case /* int32 version */ 6:
                    message.version = reader.int32();
                    break;
                case /* repeated msg_pb.PushMessage message_list */ 7:
                    message.messageList.push(PushMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* msg_pb.PushEvent.EventType event_type = 1; */
        if (message.eventType !== 0)
            writer.tag(1, WireType.Varint).int32(message.eventType);
        /* msg_pb.PushMessage message = 2; */
        if (message.message)
            PushMessage.internalBinaryWrite(message.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* msg_pb.PushCmd cmd = 3; */
        if (message.cmd)
            PushCmd.internalBinaryWrite(message.cmd, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* msg_pb.GeoInfo geo = 4; */
        if (message.geo)
            GeoInfo.internalBinaryWrite(message.geo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* msg_pb.AppAction app_action = 5; */
        if (message.appAction)
            AppAction.internalBinaryWrite(message.appAction, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 version = 6; */
        if (message.version !== 0)
            writer.tag(6, WireType.Varint).int32(message.version);
        /* repeated msg_pb.PushMessage message_list = 7; */
        for (let i = 0; i < message.messageList.length; i++)
            PushMessage.internalBinaryWrite(message.messageList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message msg_pb.PushEvent
 */
export const PushEvent = new PushEvent$Type();
